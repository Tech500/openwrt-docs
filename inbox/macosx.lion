<!DOCTYPE html>
<html lang="en" dir="ltr" class="no-js">
<head>
    <meta charset="utf-8" />
    <title>Stuff with MacOSX Lion [OpenWrt Wiki]</title>
    <script>(function(H){H.className=H.className.replace(/\bno-js\b/,'js')})(document.documentElement)</script>
    <meta name="generator" content="DokuWiki"/>
<meta name="robots" content="index,follow"/>
<meta name="keywords" content="inbox,macosx.lion"/>
<link rel="search" type="application/opensearchdescription+xml" href="../lib/exe/opensearch.php" title="OpenWrt Wiki"/>
<link rel="start" href="../index.html"/>
<link rel="contents" href="macosx.lion?do=index" title="Sitemap"/>
<link rel="alternate" type="application/rss+xml" title="Recent changes" href="../feed.php"/>
<link rel="alternate" type="application/rss+xml" title="Current namespace" href="../feed.php?mode=list&amp;ns=inbox"/>
<link rel="alternate" type="text/html" title="Plain HTML" href="../_export/xhtml/inbox/macosx.lion"/>
<link rel="alternate" type="text/plain" title="Wiki Markup" href="../_export/raw/inbox/macosx.lion"/>
<link rel="canonical" href="macosx.lion"/>
<link rel="stylesheet" type="text/css" href="../lib/exe/css.php?t=openwrt&amp;tseed=6f44f363dc87908d905dc56ff3acbfc4"/>
<script type="text/javascript">/*<![CDATA[*/var NS='inbox';var JSINFO = {"id":"inbox:macosx.lion","namespace":"inbox"};
/*!]]>*/</script>
<script type="text/javascript" charset="utf-8" src="../lib/exe/js.php?tseed=6f44f363dc87908d905dc56ff3acbfc4"></script>
<script type="text/javascript" charset="utf-8">/*<![CDATA[*/jQuery(function(){
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1432265553 166.182.3.5';
			document.forms[i].appendChild(myElement);
		}
	}
});
/*!]]>*/</script>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="shortcut icon" href="../lib/tpl/openwrt/images/favicon.ico" />
<link rel="apple-touch-icon" href="../lib/tpl/openwrt/images/apple-touch-icon.png" />
    </head>

<body>
    <!--[if lte IE 7 ]><div id="IE7"><![endif]--><!--[if IE 8 ]><div id="IE8"><![endif]-->
    <div id="dokuwiki__site"><div id="dokuwiki__top" class="site dokuwiki mode_show tpl_openwrt     ">

        
<!-- ********** HEADER ********** -->
<div id="dokuwiki__header"><div class="pad group">

    
    <div class="headings group">
        <ul class="a11y skip">
            <li><a href="macosx.lion#dokuwiki__content">skip to content</a></li>
        </ul>

        <h1><a href="../start"  accesskey="h" title="[H]"><img src="../lib/tpl/openwrt/images/logo.png" width="386" height="98" alt="" /> <span>OpenWrt Wiki</span></a></h1>
            </div>

    <div class="tools group">
        <!-- USER TOOLS -->
                    <div id="dokuwiki__usertools">
                <h3 class="a11y">User Tools</h3>
                <ul>
                    <li><a href="macosx.lion?do=register"  class="action register" rel="nofollow" title="Register">Register</a></li><li><a href="macosx.lion?do=login&amp;sectok=382740b13d95f946eed36caa57076b4a"  class="action login" rel="nofollow" title="Login">Login</a></li>                </ul>
            </div>
        
        <!-- SITE TOOLS -->
        <div id="dokuwiki__sitetools">
            <h3 class="a11y">Site Tools</h3>
            <form action="../start" accept-charset="utf-8" class="search" id="dw__search" method="get" role="search"><div class="no"><input type="hidden" name="do" value="search" /><input type="text" id="qsearch__in" accesskey="f" name="id" class="edit" title="[F]" /><input type="submit" value="Search" class="button" title="Search" /><div id="qsearch__out" class="ajax_qsearch JSpopup"></div></div></form>            <div class="mobileTools">
                <form action="../doku.php" method="get" accept-charset="utf-8"><div class="no"><input type="hidden" name="id" value="inbox:macosx.lion" /><select name="do" class="edit quickselect" title="Tools"><option value="">Tools</option><optgroup label="Page Tools"><option value="edit">Show pagesource</option><option value="revisions">Old revisions</option><option value="backlink">Backlinks</option></optgroup><optgroup label="Site Tools"><option value="recent">Recent changes</option><option value="media">Media Manager</option><option value="index">Sitemap</option></optgroup><optgroup label="User Tools"><option value="login">Login</option><option value="register">Register</option></optgroup></select><input type="submit" value="&gt;" /></div></form>            </div>
            <ul>
                <li><a href="macosx.lion?do=recent"  class="action recent" accesskey="r" rel="nofollow" title="Recent changes [R]">Recent changes</a></li><li><a href="macosx.lion?do=media&amp;ns=inbox"  class="action media" rel="nofollow" title="Media Manager">Media Manager</a></li><li><a href="macosx.lion?do=index"  class="action index" accesskey="x" rel="nofollow" title="Sitemap [X]">Sitemap</a></li>            </ul>
        </div>

    </div>

    <!-- BREADCRUMBS -->
            <div class="breadcrumbs">
                            <div class="youarehere"><span class="bchead">You are here: </span><span class="home"><bdi><a href="../start" class="wikilink1" title="start">OpenWrt Wiki</a></bdi></span> » <bdi><a href="start" class="wikilink1" title="inbox:start">Build and installation - Few Adjustments - NEW (shiva)</a></bdi> » <bdi><span class="curid"><a href="macosx.lion" class="wikilink1" title="inbox:macosx.lion">Stuff with MacOSX Lion</a></span></bdi></div>
                                    <div class="plugin_multilingual">
        <ul>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/cz/inbox/macosx.lion" class="media" title="cz:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=aff589&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fcz.gif" class="media" title="Čeština (Czech)" alt="Čeština (Czech)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/de/inbox/macosx.lion" class="media" title="de:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=e24010&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fde.gif" class="media" title="Deutsch (German)" alt="Deutsch (German)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <span class="curid"><a href="macosx.lion" class="media" title="inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=2a37ae&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fgb.gif" class="media" title="English" alt="English" /></a></span>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/es/inbox/macosx.lion" class="media" title="es:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=46c004&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fmx.gif" class="media" title="Español (Spanish, Mexico)" alt="Español (Spanish, Mexico)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/fr/inbox/macosx.lion" class="media" title="fr:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=a5beba&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Ffr.gif" class="media" title="Français (French)" alt="Français (French)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/hu/inbox/macosx.lion" class="media" title="hu:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=6b5470&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fhu.gif" class="media" title="Magyar (Hungarian)" alt="Magyar (Hungarian)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/jp/inbox/macosx.lion" class="media" title="jp:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=f999fc&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fjp.gif" class="media" title="日本語 (Japanese)" alt="日本語 (Japanese)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/pl/inbox/macosx.lion" class="media" title="pl:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=c805c0&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fpl.gif" class="media" title="Poliski (Polish)" alt="Poliski (Polish)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/pt-br/inbox/macosx.lion" class="media" title="pt-br:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=13127d&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fbr.gif" class="media" title="Português brasileiro (Portuguese, Brasil)" alt="Português brasileiro (Portuguese, Brasil)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/ru/inbox/macosx.lion" class="media" title="ru:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=66ab5e&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fru.gif" class="media" title="Русский (Russsian)" alt="Русский (Russsian)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/tr/inbox/macosx.lion" class="media" title="tr:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=f4beed&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Ftr.gif" class="media" title="Tϋrkçe (Turkish)" alt="Tϋrkçe (Turkish)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/zh-cn/inbox/macosx.lion" class="media" title="zh-cn:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=93625a&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fzh-cn.gif" class="media" title="官話/官话 (Chinese)" alt="官話/官话 (Chinese)" /></a>
              </div>
            </div>
          </li>
          <li>
            <div class="li">
              <div class="flag_not_exists">
                <a href="http://wiki.openwrt.org/zh-tw/inbox/macosx.lion" class="media" title="zh-tw:inbox:macosx.lion"><img src="../lib/exe/fetch.php?cache=&amp;tok=b56198&amp;media=http%253A%252F%252Fwiki.openwrt.org%252Flib%252Fplugins%252Fmultilingual%252Fflags%252Fzh-tw.gif" class="media" title="臺灣華語 (Taiwanese)" alt="臺灣華語 (Taiwanese)" /></a>
              </div>
            </div>
          </li>
        </ul>
      </div>
        </div>
    
    
    <hr class="a11y" />
</div></div><!-- /header -->

        <div class="wrapper group">

            
            <!-- ********** CONTENT ********** -->
            <div id="dokuwiki__content"><div class="pad group">

                <div class="pageId"><span>inbox:macosx.lion</span></div>

                <div class="page group">
                                                            <!-- wikipage start -->
                    <!-- TOC START -->
<div id="dw__toc">
<h3 class="toggle">Table of Contents</h3>
<div>

<ul class="toc">
<li class="level1"><div class="li"><a href="macosx.lion#getting_the_mktplinkfw">Getting the mktplinkfw</a></div></li>
<li class="level1"><div class="li"><a href="macosx.lion#some_outputs_from_the_above_program_for_6_firmwares">Some outputs from the above program for 6 firmwares</a></div></li>
<li class="level1"><div class="li"><a href="macosx.lion#to_extract_the_rootfs_of_factory_image">To Extract the rootfs of factory image</a></div></li>
<li class="level1"><div class="li"><a href="macosx.lion#making_it_work_with_other_unsupported_modems_with_factory_image">Making it work with other &quot;unsupported&quot; modems with factory image</a></div>
<ul class="toc">
<li class="level2"><div class="li"><a href="macosx.lion#patching_httpd_to_remove_error_commands">patching httpd to remove ERROR commands</a></div></li>
<li class="level2"><div class="li"><a href="macosx.lion#result">Result</a></div></li>
</ul></li>
</ul>
</div>
</div>
<!-- TOC END -->

<h1 class="sectionedit1" id="stuff_with_macosx_lion">Stuff with MacOSX Lion</h1>
<div class="level1">
<div class="table sectionedit2"><table class="inline">
	<tr class="row0">
		<td class="col0"> →<a href="../doc/howto/buildroot.exigence" class="wikilink1" title="doc:howto:buildroot.exigence">Procedure on Debian</a> </td><td class="col1"> →<a href="http://wiki.openwrt.org/doc/howto/buildroot.exigence.bsd" class="wikilink2" title="doc:howto:buildroot.exigence.bsd" rel="nofollow">Procedure on ~BSD</a> </td><td class="col2"> <strong>→<a href="../doc/howto/buildroot.exigence.macosx" class="wikilink1" title="doc:howto:buildroot.exigence.macosx">Procedure on Mac OS</a></strong> </td>
	</tr>
</table></div>
<hr />

<p>
<img src="../lib/images/smileys/icon_exclaim.gif" class="icon" alt=":!:" /> Please MERGE this page and <a href="../easy.build.macosx" class="wikilink1" title="easy.build.macosx">easy.build.macosx</a> into this page: <strong><a href="../doc/howto/buildroot.exigence.macosx" class="wikilink1" title="doc:howto:buildroot.exigence.macosx">buildroot.exigence.macosx</a></strong>. Also consult the <a href="https://forum.openwrt.org/viewtopic.php?id=34676" class="urlextern" title="https://forum.openwrt.org/viewtopic.php?id=34676"  rel="nofollow">OpenWrt Forum: Build OpenWrt on Mac OS X 10.7 Lion</a>
</p>
<hr />

</div>

<h2 class="sectionedit3" id="getting_the_mktplinkfw">Getting the mktplinkfw</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> (Revision 29681, 22.1 KB (checked in by juhosg, 7 weeks ago)) working in MacOSX Lion Xcode 4.4 Developer review in 64bit and not need md5.c/md5.h (because md5.c not support 64bit)</div>
</li>
</ul>

<p>
<a href="../doc/howto/tftp#gettingtftptoworkinmacosxlion" class="wikilink1" title="doc:howto:generic.flashing.tftp">getting.tftp.to.work.in.macosx.lion</a>
</p>

<p>
I don&#039;t think I can merge my changes to the trunk, original file is from
</p>

<p>
<a href="https://dev.openwrt.org/browser/trunk/tools/firmware-utils/src/mktplinkfw.c" class="urlextern" title="https://dev.openwrt.org/browser/trunk/tools/firmware-utils/src/mktplinkfw.c"  rel="nofollow">https://dev.openwrt.org/browser/trunk/tools/firmware-utils/src/mktplinkfw.c</a>  (Revision 29681)
</p>

<p>
If you need 32bit OSX (or dual 64 and 32) one just change it in the project settings
</p>

<p>
Create new CLI (command line) application, then replace all the main.m with this.
Then compile, then the output is at the DerivedData/Project/Debug directory
</p>

<p>
Summary of changes
</p>

<p>
1) replace all getmd5 with CC_MD5 (x2)
</p>

<p>
2) comment out md5.h
</p>

<p>
3) Add CommonDigest.h
</p>

<p>
4) All the &quot;struct getmd5&quot; comment out
</p>

<p>
I don&#039;t know if functions other than &quot;inspect&quot; will work properly
</p>

<p>
<pre class="code">//
//  main.m
//   
//
//  Created by on Saturday,2/25/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#import &lt;Foundation/Foundation.h&gt;
#import &lt;CommonCrypto/CommonDigest.h&gt;
/*
 * Copyright (C) 2009 Gabor Juhos &lt;juhosg@openwrt.org&gt;
 *
 * This tool was based on:
 *   TP-Link WR941 V2 firmware checksum fixing tool.
 *   Copyright (C) 2008,2009 Wang Jian &lt;lark@linux.net.cn&gt;
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdint.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;     /* for unlink() */
#include &lt;libgen.h&gt;
#include &lt;getopt.h&gt;     /* for getopt() */
#include &lt;stdarg.h&gt;
#include &lt;errno.h&gt;
#include &lt;sys/stat.h&gt;

#include &lt;arpa/inet.h&gt;
#include &lt;netinet/in.h&gt;

//#include &quot;md5.h&quot;

#define ALIGN(x,a) ({ typeof(a) __a = (a); (((x) + __a - 1) &amp; ~(__a - 1)); })

#define HEADER_VERSION_V1	0x01000000
#define HWID_TL_MR3020_V1	0x30200001
#define HWID_TL_MR3220_V1	0x32200001
#define HWID_TL_MR3420_V1	0x34200001
#define HWID_TL_WA701N_V1	0x07010001
#define HWID_TL_WA901ND_V1	0x09010001
#define HWID_TL_WA901ND_V2	0x09010002
#define HWID_TL_WR703N_V1	0x07030101
#define HWID_TL_WR741ND_V1	0x07410001
#define HWID_TL_WR741ND_V4	0x07410004
#define HWID_TL_WR740N_V1	0x07400001
#define HWID_TL_WR740N_V3	0x07400003
#define HWID_TL_WR743ND_V1	0x07430001
#define HWID_TL_WR841N_V1_5	0x08410002
#define HWID_TL_WR841ND_V3	0x08410003
#define HWID_TL_WR841ND_V5	0x08410005
#define HWID_TL_WR841ND_V7	0x08410007
#define HWID_TL_WR941ND_V2	0x09410002
#define HWID_TL_WR941ND_V4	0x09410004
#define HWID_TL_WR1043ND_V1	0x10430001
#define HWID_TL_WR2543N_V1	0x25430001

#define MD5SUM_LEN	16

struct file_info {
char		*file_name;	/* name of the file */
uint32_t	file_size;	/* length of the file */
};

struct fw_header {
uint32_t	version;	/* header version */
char		vendor_name[24];
char		fw_version[36];
uint32_t	hw_id;		/* hardware id */
uint32_t	hw_rev;		/* hardware revision */
uint32_t	unk1;
uint8_t		md5sum1[MD5SUM_LEN];
uint32_t	unk2;
uint8_t		md5sum2[MD5SUM_LEN];
uint32_t	unk3;
uint32_t	kernel_la;	/* kernel load address */
uint32_t	kernel_ep;	/* kernel entry point */
uint32_t	fw_length;	/* total length of the firmware */
uint32_t	kernel_ofs;	/* kernel data offset */
uint32_t	kernel_len;	/* kernel data length */
uint32_t	rootfs_ofs;	/* rootfs data offset */
uint32_t	rootfs_len;	/* rootfs data length */
uint32_t	boot_ofs;	/* bootloader data offset */
uint32_t	boot_len;	/* bootloader data length */
uint8_t		pad[360];
} __attribute__ ((packed));

struct flash_layout {
char		*id;
uint32_t	fw_max_len;
uint32_t	kernel_la;
uint32_t	kernel_ep;
uint32_t	rootfs_ofs;
};

struct board_info {
char		*id;
uint32_t	hw_id;
uint32_t	hw_rev;
char		*layout_id;
};

/*
 * Globals
 */
static char *ofname;
static char *progname;
static char *vendor = &quot;TP-LINK Technologies&quot;;
static char *version = &quot;ver. 1.0&quot;;

static char *board_id;
static struct board_info *board;
static char *layout_id;
static struct flash_layout *layout;
static char *opt_hw_id;
static uint32_t hw_id;
static char *opt_hw_rev;
static uint32_t hw_rev;
static struct file_info kernel_info;
static uint32_t kernel_la = 0;
static uint32_t kernel_ep = 0;
static uint32_t kernel_len = 0;
static struct file_info rootfs_info;
static uint32_t rootfs_ofs = 0;
static uint32_t rootfs_align;
static struct file_info boot_info;
static int combined;
static int strip_padding;
static int add_jffs2_eof;
static unsigned char jffs2_eof_mark[4] = {0xde, 0xad, 0xc0, 0xde};

static struct file_info inspect_info;
static int extract = 0;

char md5salt_normal[MD5SUM_LEN] = {
	0xdc, 0xd7, 0x3a, 0xa5, 0xc3, 0x95, 0x98, 0xfb,
	0xdd, 0xf9, 0xe7, 0xf4, 0x0e, 0xae, 0x47, 0x38,
};

char md5salt_boot[MD5SUM_LEN] = {
	0x8c, 0xef, 0x33, 0x5b, 0xd5, 0xc5, 0xce, 0xfa,
	0xa7, 0x9c, 0x28, 0xda, 0xb2, 0xe9, 0x0f, 0x42,
};

static struct flash_layout layouts[] = {
	{
		.id		= &quot;4M&quot;,
		.fw_max_len	= 0x3c0000,
		.kernel_la	= 0x80060000,
		.kernel_ep	= 0x80060000,
		.rootfs_ofs	= 0x140000,
	}, {
		.id		= &quot;4Mlzma&quot;,
		.fw_max_len	= 0x3c0000,
		.kernel_la	= 0x80060000,
		.kernel_ep	= 0x80060000,
		.rootfs_ofs	= 0x100000,
	}, {
		.id		= &quot;8M&quot;,
		.fw_max_len	= 0x7c0000,
		.kernel_la	= 0x80060000,
		.kernel_ep	= 0x80060000,
		.rootfs_ofs	= 0x140000,
	}, {
		.id		= &quot;8Mlzma&quot;,
		.fw_max_len	= 0x7c0000,
		.kernel_la	= 0x80060000,
		.kernel_ep	= 0x80060000,
		.rootfs_ofs	= 0x100000,
	}, {
		/* terminating entry */
	}
};

static struct board_info boards[] = {
	{
		.id		= &quot;TL-MR3020v1&quot;,
		.hw_id		= HWID_TL_MR3020_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;4Mlzma&quot;,
	}, {
		.id		= &quot;TL-MR3220v1&quot;,
		.hw_id		= HWID_TL_MR3220_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-MR3420v1&quot;,
		.hw_id		= HWID_TL_MR3420_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WA701Nv1&quot;,
		.hw_id		= HWID_TL_WA701N_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WA901NDv1&quot;,
		.hw_id		= HWID_TL_WA901ND_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id             = &quot;TL-WA901NDv2&quot;,
		.hw_id          = HWID_TL_WA901ND_V2,
		.hw_rev         = 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR741NDv1&quot;,
		.hw_id		= HWID_TL_WR741ND_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR741NDv4&quot;,
		.hw_id		= HWID_TL_WR741ND_V4,
		.hw_rev		= 1,
		.layout_id	= &quot;4Mlzma&quot;,
	}, {
		.id		= &quot;TL-WR740Nv1&quot;,
		.hw_id		= HWID_TL_WR740N_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR740Nv3&quot;,
		.hw_id		= HWID_TL_WR740N_V3,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR743NDv1&quot;,
		.hw_id		= HWID_TL_WR743ND_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR841Nv1.5&quot;,
		.hw_id		= HWID_TL_WR841N_V1_5,
		.hw_rev		= 2,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR841NDv3&quot;,
		.hw_id		= HWID_TL_WR841ND_V3,
		.hw_rev		= 3,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR841NDv5&quot;,
		.hw_id		= HWID_TL_WR841ND_V5,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR841NDv7&quot;,
		.hw_id		= HWID_TL_WR841ND_V7,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR941NDv2&quot;,
		.hw_id		= HWID_TL_WR941ND_V2,
		.hw_rev		= 2,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR941NDv4&quot;,
		.hw_id		= HWID_TL_WR941ND_V4,
		.hw_rev		= 1,
		.layout_id	= &quot;4M&quot;,
	}, {
		.id		= &quot;TL-WR1043NDv1&quot;,
		.hw_id		= HWID_TL_WR1043ND_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;8M&quot;,
	}, {
		.id		= &quot;TL-WR2543Nv1&quot;,
		.hw_id		= HWID_TL_WR2543N_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;8Mlzma&quot;,
	}, {
		.id		= &quot;TL-WR703Nv1&quot;,
		.hw_id		= HWID_TL_WR703N_V1,
		.hw_rev		= 1,
		.layout_id	= &quot;4Mlzma&quot;,
	}, {
		/* terminating entry */
	}
};

/*
 * Message macros
 */
#define ERR(fmt, ...) do { \
fflush(0); \
fprintf(stderr, &quot;[%s] *** error: &quot; fmt &quot;\n&quot;, \
progname, ## __VA_ARGS__ ); \
} while (0)

#define ERRS(fmt, ...) do { \
int save = errno; \
fflush(0); \
fprintf(stderr, &quot;[%s] *** error: &quot; fmt &quot;\n&quot;, \
progname, ## __VA_ARGS__, strerror(save)); \
} while (0)

#define DBG(fmt, ...) do { \
fprintf(stderr, &quot;[%s] &quot; fmt &quot;\n&quot;, progname, ## __VA_ARGS__ ); \
} while (0)

static struct board_info *find_board(char *id)
{
	struct board_info *ret;
	struct board_info *board;
    
	ret = NULL;
	for (board = boards; board-&gt;id != NULL; board++){
		if (strcasecmp(id, board-&gt;id) == 0) {
			ret = board;
			break;
		}
	};
    
	return ret;
}

static struct board_info *find_board_by_hwid(uint32_t hw_id)
{
	struct board_info *board;
    
	for (board = boards; board-&gt;id != NULL; board++) {
		if (hw_id == board-&gt;hw_id)
			return board;
	};
    
	return NULL;
}

static struct flash_layout *find_layout(char *id)
{
	struct flash_layout *ret;
	struct flash_layout *l;
    
	ret = NULL;
	for (l = layouts; l-&gt;id != NULL; l++){
		if (strcasecmp(id, l-&gt;id) == 0) {
			ret = l;
			break;
		}
	};
    
	return ret;
}

static void usage(int status)
{
	FILE *stream = (status != EXIT_SUCCESS) ? stderr : stdout;
	struct board_info *board;
    
	fprintf(stream, &quot;Usage: %s [OPTIONS...]\n&quot;, progname);
	fprintf(stream,
            &quot;\n&quot;
            &quot;Options:\n&quot;
            &quot;  -B &lt;board&gt;      create image for the board specified with &lt;board&gt;\n&quot;
            &quot;  -c              use combined kernel image\n&quot;
            &quot;  -E &lt;ep&gt;         overwrite kernel entry point with &lt;ep&gt; (hexval prefixed with 0x)\n&quot;
            &quot;  -L &lt;la&gt;         overwrite kernel load address with &lt;la&gt; (hexval prefixed with 0x)\n&quot;
            &quot;  -H &lt;hwid&gt;       use hardware id specified with &lt;hwid&gt;\n&quot;
            &quot;  -F &lt;id&gt;         use flash layout specified with &lt;id&gt;\n&quot;
            &quot;  -k &lt;file&gt;       read kernel image from the file &lt;file&gt;\n&quot;
            &quot;  -r &lt;file&gt;       read rootfs image from the file &lt;file&gt;\n&quot;
            &quot;  -a &lt;align&gt;      align the rootfs start on an &lt;align&gt; bytes boundary\n&quot;
            &quot;  -R &lt;offset&gt;     overwrite rootfs offset with &lt;offset&gt; (hexval prefixed with 0x)\n&quot;
            &quot;  -o &lt;file&gt;       write output to the file &lt;file&gt;\n&quot;
            &quot;  -s              strip padding from the end of the image\n&quot;
            &quot;  -j              add jffs2 end-of-filesystem markers\n&quot;
            &quot;  -N &lt;vendor&gt;     set image vendor to &lt;vendor&gt;\n&quot;
            &quot;  -V &lt;version&gt;    set image version to &lt;version&gt;\n&quot;
            &quot;  -i &lt;file&gt;       inspect given firmware file &lt;file&gt;\n&quot;
            &quot;  -x              extract kernel and rootfs while inspecting (requires -i)\n&quot;
            &quot;  -h              show this screen\n&quot;
            );
    
	exit(status);
}

//static int get_md5(char *data, int size, char *md5)
//{
//	MD5_CTX ctx;
//    
//	MD5_Init(&amp;ctx);
//	MD5_Update(&amp;ctx, data, size);
//	MD5_Final(md5, &amp;ctx);
//}

static int get_file_stat(struct file_info *fdata)
{
	struct stat st;
	int res;
    
	if (fdata-&gt;file_name == NULL)
		return 0;
    
	res = stat(fdata-&gt;file_name, &amp;st);
	if (res){
		ERRS(&quot;stat failed on %s&quot;, fdata-&gt;file_name);
		return res;
	}
    
	fdata-&gt;file_size = st.st_size;
	return 0;
}

static int read_to_buf(struct file_info *fdata, char *buf)
{
	FILE *f;
	int ret = EXIT_FAILURE;
    
	f = fopen(fdata-&gt;file_name, &quot;r&quot;);
	if (f == NULL) {
		ERRS(&quot;could not open \&quot;%s\&quot; for reading&quot;, fdata-&gt;file_name);
		goto out;
	}
    
	errno = 0;
	fread(buf, fdata-&gt;file_size, 1, f);
	if (errno != 0) {
		ERRS(&quot;unable to read from file \&quot;%s\&quot;&quot;, fdata-&gt;file_name);
		goto out_close;
	}
    
	ret = EXIT_SUCCESS;
    
out_close:
	fclose(f);
    out:
	return ret;
}

static int check_options(void)
{
	int ret;
    
	if (inspect_info.file_name) {
		ret = get_file_stat(&amp;inspect_info);
		if (ret)
			return ret;
        
		return 0;
	} else if (extract) {
		ERR(&quot;no firmware for inspection specified&quot;);
		return -1;
	}
    
	if (board_id == NULL &amp;&amp; opt_hw_id == NULL) {
		ERR(&quot;either board or hardware id must be specified&quot;);
		return -1;
	}
    
	if (board_id) {
		board = find_board(board_id);
		if (board == NULL) {
			ERR(&quot;unknown/unsupported board id \&quot;%s\&quot;&quot;, board_id);
			return -1;
		}
		if (layout_id == NULL)
			layout_id = board-&gt;layout_id;
        
		hw_id = board-&gt;hw_id;
		hw_rev = board-&gt;hw_rev;
	} else {
		if (layout_id == NULL) {
			ERR(&quot;flash layout is not specified&quot;);
			return -1;
		}
		hw_id = strtoul(opt_hw_id, NULL, 0);
        
		if (opt_hw_rev)
			hw_rev = strtoul(opt_hw_rev, NULL, 0);
		else
			hw_rev = 1;
	}
    
	layout = find_layout(layout_id);
	if (layout == NULL) {
		ERR(&quot;unknown flash layout \&quot;%s\&quot;&quot;, layout_id);
		return -1;
	}
    
	if (!kernel_la)
		kernel_la = layout-&gt;kernel_la;
	if (!kernel_ep)
		kernel_ep = layout-&gt;kernel_ep;
	if (!rootfs_ofs)
		rootfs_ofs = layout-&gt;rootfs_ofs;
    
	if (kernel_info.file_name == NULL) {
		ERR(&quot;no kernel image specified&quot;);
		return -1;
	}
    
	ret = get_file_stat(&amp;kernel_info);
	if (ret)
		return ret;
    
	kernel_len = kernel_info.file_size;
    
	if (combined) {
		if (kernel_info.file_size &gt;
		    layout-&gt;fw_max_len - sizeof(struct fw_header)) {
			ERR(&quot;kernel image is too big&quot;);
			return -1;
		}
	} else {
		if (rootfs_info.file_name == NULL) {
			ERR(&quot;no rootfs image specified&quot;);
			return -1;
		}
        
		ret = get_file_stat(&amp;rootfs_info);
		if (ret)
			return ret;
        
		if (rootfs_align) {
			kernel_len += sizeof(struct fw_header);
			kernel_len = ALIGN(kernel_len, rootfs_align);
			kernel_len -= sizeof(struct fw_header);
            
			DBG(&quot;kernel length aligned to %u&quot;, kernel_len);
            
			if (kernel_len + rootfs_info.file_size &gt;
			    layout-&gt;fw_max_len - sizeof(struct fw_header)) {
				ERR(&quot;images are too big&quot;);
				return -1;
			}
		} else {
			if (kernel_info.file_size &gt;
			    rootfs_ofs - sizeof(struct fw_header)) {
				ERR(&quot;kernel image is too big&quot;);
				return -1;
			}
            
			if (rootfs_info.file_size &gt;
			    (layout-&gt;fw_max_len - rootfs_ofs)) {
				ERR(&quot;rootfs image is too big&quot;);
				return -1;
			}
		}
	}
    
	if (ofname == NULL) {
		ERR(&quot;no output file specified&quot;);
		return -1;
	}
    
	return 0;
}

static void fill_header(char *buf, int len)
{
	struct fw_header *hdr = (struct fw_header *)buf;
    
	memset(hdr, 0, sizeof(struct fw_header));
    
	hdr-&gt;version = htonl(HEADER_VERSION_V1);
	strncpy(hdr-&gt;vendor_name, vendor, sizeof(hdr-&gt;vendor_name));
	strncpy(hdr-&gt;fw_version, version, sizeof(hdr-&gt;fw_version));
	hdr-&gt;hw_id = htonl(hw_id);
	hdr-&gt;hw_rev = htonl(hw_rev);
    
	if (boot_info.file_size == 0)
		memcpy(hdr-&gt;md5sum1, md5salt_normal, sizeof(hdr-&gt;md5sum1));
	else
		memcpy(hdr-&gt;md5sum1, md5salt_boot, sizeof(hdr-&gt;md5sum1));
    
	hdr-&gt;kernel_la = htonl(kernel_la);
	hdr-&gt;kernel_ep = htonl(kernel_ep);
	hdr-&gt;fw_length = htonl(layout-&gt;fw_max_len);
	hdr-&gt;kernel_ofs = htonl(sizeof(struct fw_header));
	hdr-&gt;kernel_len = htonl(kernel_len);
	if (!combined) {
		hdr-&gt;rootfs_ofs = htonl(rootfs_ofs);
		hdr-&gt;rootfs_len = htonl(rootfs_info.file_size);
	}
    
	CC_MD5(buf, len, hdr-&gt;md5sum1);
}

static int pad_jffs2(char *buf, int currlen)
{
	int len;
	uint32_t pad_mask;
    
	len = currlen;
	pad_mask = (64 * 1024);
	while ((len &lt; layout-&gt;fw_max_len) &amp;&amp; (pad_mask != 0)) {
		uint32_t mask;
		int i;
        
		for (i = 10; i &lt; 32; i++) {
			mask = 1 &lt;&lt; i;
			if (pad_mask &amp; mask)
				break;
		}
        
		len = ALIGN(len, mask);
        
		for (i = 10; i &lt; 32; i++) {
			mask = 1 &lt;&lt; i;
			if ((len &amp; (mask - 1)) == 0)
				pad_mask &amp;= ~mask;
		}
        
		for (i = 0; i &lt; sizeof(jffs2_eof_mark); i++)
			buf[len + i] = jffs2_eof_mark[i];
        
		len += sizeof(jffs2_eof_mark);
	}
    
	return len;
}

static int write_fw(char *data, int len)
{
	FILE *f;
	int ret = EXIT_FAILURE;
    
	f = fopen(ofname, &quot;w&quot;);
	if (f == NULL) {
		ERRS(&quot;could not open \&quot;%s\&quot; for writing&quot;, ofname);
		goto out;
	}
    
	errno = 0;
	fwrite(data, len, 1, f);
	if (errno) {
		ERRS(&quot;unable to write output file&quot;);
		goto out_flush;
	}
    
	DBG(&quot;firmware file \&quot;%s\&quot; completed&quot;, ofname);
    
	ret = EXIT_SUCCESS;
    
out_flush:
	fflush(f);
	fclose(f);
	if (ret != EXIT_SUCCESS) {
		unlink(ofname);
	}
    out:
	return ret;
}

static int build_fw(void)
{
	int buflen;
	char *buf;
	char *p;
	int ret = EXIT_FAILURE;
	int writelen = 0;
    
	buflen = layout-&gt;fw_max_len;
    
	buf = malloc(buflen);
	if (!buf) {
		ERR(&quot;no memory for buffer\n&quot;);
		goto out;
	}
    
	memset(buf, 0xff, buflen);
	p = buf + sizeof(struct fw_header);
	ret = read_to_buf(&amp;kernel_info, p);
	if (ret)
		goto out_free_buf;
    
	writelen = sizeof(struct fw_header) + kernel_len;
    
	if (!combined) {
		if (rootfs_align)
			p = buf + writelen;
		else
			p = buf + rootfs_ofs;
        
		ret = read_to_buf(&amp;rootfs_info, p);
		if (ret)
			goto out_free_buf;
        
		if (rootfs_align)
			writelen += rootfs_info.file_size;
		else
			writelen = rootfs_ofs + rootfs_info.file_size;
        
		if (add_jffs2_eof)
			writelen = pad_jffs2(buf, writelen);
	}
    
	if (!strip_padding)
		writelen = buflen;
    
	fill_header(buf, writelen);
	ret = write_fw(buf, writelen);
	if (ret)
		goto out_free_buf;
    
	ret = EXIT_SUCCESS;
    
out_free_buf:
	free(buf);
    out:
	return ret;
}

/* Helper functions to inspect_fw() representing different output formats */
static inline void inspect_fw_pstr(char *label, char *str)
{
	printf(&quot;%-23s: %s\n&quot;, label, str);
}

static inline void inspect_fw_phex(char *label, uint32_t val)
{
	printf(&quot;%-23s: 0x%08x\n&quot;, label, val);
}

static inline void inspect_fw_phexpost(char *label,
                                       uint32_t val, char *post)
{
	printf(&quot;%-23s: 0x%08x (%s)\n&quot;, label, val, post);
}

static inline void inspect_fw_phexdef(char *label,
                                      uint32_t val, uint32_t defval)
{
	printf(&quot;%-23s: 0x%08x                  &quot;, label, val);
    
	if (val == defval)
		printf(&quot;(== OpenWrt default)\n&quot;);
	else
		printf(&quot;(OpenWrt default: 0x%08x)\n&quot;, defval);
}

static inline void inspect_fw_phexexp(char *label,
                                      uint32_t val, uint32_t expval)
{
	printf(&quot;%-23s: 0x%08x &quot;, label, val);
    
	if (val == expval)
		printf(&quot;(ok)\n&quot;);
	else
		printf(&quot;(expected: 0x%08x)\n&quot;, expval);
}

static inline void inspect_fw_phexdec(char *label, uint32_t val)
{
	printf(&quot;%-23s: 0x%08x / %8u bytes\n&quot;, label, val, val);
}

static inline void inspect_fw_phexdecdef(char *label,
                                         uint32_t val, uint32_t defval)
{
	printf(&quot;%-23s: 0x%08x / %8u bytes &quot;, label, val, val);
    
	if (val == defval)
		printf(&quot;(== OpenWrt default)\n&quot;);
	else
		printf(&quot;(OpenWrt default: 0x%08x)\n&quot;, defval);
}

static inline void inspect_fw_pmd5sum(char *label, uint8_t *val, char *text)
{
	int i;
    
	printf(&quot;%-23s:&quot;, label);
	for (i=0; i&lt;MD5SUM_LEN; i++)
		printf(&quot; %02x&quot;, val[i]);
	printf(&quot; %s\n&quot;, text);
}

static int inspect_fw(void)
{
	char *buf;
	struct fw_header *hdr;
	uint8_t md5sum[MD5SUM_LEN];
	struct board_info *board;
	int ret = EXIT_FAILURE;
    
	buf = malloc(inspect_info.file_size);
	if (!buf) {
		ERR(&quot;no memory for buffer!\n&quot;);
		goto out;
	}
    
	ret = read_to_buf(&amp;inspect_info, buf);
	if (ret)
		goto out_free_buf;
	hdr = (struct fw_header *)buf;
    
	inspect_fw_pstr(&quot;File name&quot;, inspect_info.file_name);
	inspect_fw_phexdec(&quot;File size&quot;, inspect_info.file_size);
    
	if (ntohl(hdr-&gt;version) != HEADER_VERSION_V1) {
		ERR(&quot;file does not seem to have V1 header!\n&quot;);
		goto out_free_buf;
	}
    
	inspect_fw_phexdec(&quot;Version 1 Header size&quot;, sizeof(struct fw_header));
    
	if (ntohl(hdr-&gt;unk1) != 0)
		inspect_fw_phexdec(&quot;Unknown value 1&quot;, hdr-&gt;unk1);
    
	memcpy(md5sum, hdr-&gt;md5sum1, sizeof(md5sum));
	if (ntohl(hdr-&gt;boot_len) == 0)
		memcpy(hdr-&gt;md5sum1, md5salt_normal, sizeof(md5sum));
	else
		memcpy(hdr-&gt;md5sum1, md5salt_boot, sizeof(md5sum));
	CC_MD5(buf, inspect_info.file_size, hdr-&gt;md5sum1);
    
	if (memcmp(md5sum, hdr-&gt;md5sum1, sizeof(md5sum))) {
		inspect_fw_pmd5sum(&quot;Header MD5Sum1&quot;, md5sum, &quot;(*ERROR*)&quot;);
		inspect_fw_pmd5sum(&quot;          --&gt; expected&quot;, hdr-&gt;md5sum1, &quot;&quot;);
	} else {
		inspect_fw_pmd5sum(&quot;Header MD5Sum1&quot;, md5sum, &quot;(ok)&quot;);
	}
	if (ntohl(hdr-&gt;unk2) != 0)
		inspect_fw_phexdec(&quot;Unknown value 2&quot;, hdr-&gt;unk2);
	inspect_fw_pmd5sum(&quot;Header MD5Sum2&quot;, hdr-&gt;md5sum2,
	                   &quot;(purpose yet unknown, unchecked here)&quot;);
	if (ntohl(hdr-&gt;unk3) != 0)
		inspect_fw_phexdec(&quot;Unknown value 3&quot;, hdr-&gt;unk3);
    
	printf(&quot;\n&quot;);
    
	inspect_fw_pstr(&quot;Vendor name&quot;, hdr-&gt;vendor_name);
	inspect_fw_pstr(&quot;Firmware version&quot;, hdr-&gt;fw_version);
	board = find_board_by_hwid(ntohl(hdr-&gt;hw_id));
	if (board) {
		layout = find_layout(board-&gt;layout_id);
		inspect_fw_phexpost(&quot;Hardware ID&quot;,
		                    ntohl(hdr-&gt;hw_id), board-&gt;id);
		inspect_fw_phexexp(&quot;Hardware Revision&quot;,
		                   ntohl(hdr-&gt;hw_rev), board-&gt;hw_rev);
	} else {
		inspect_fw_phexpost(&quot;Hardware ID&quot;,
		                    ntohl(hdr-&gt;hw_id), &quot;unknown&quot;);
		inspect_fw_phex(&quot;Hardware Revision&quot;,
		                ntohl(hdr-&gt;hw_rev));
	}
    
	printf(&quot;\n&quot;);
    
	inspect_fw_phexdec(&quot;Kernel data offset&quot;,
	                   ntohl(hdr-&gt;kernel_ofs));
	inspect_fw_phexdec(&quot;Kernel data length&quot;,
	                   ntohl(hdr-&gt;kernel_len));
	if (board) {
		inspect_fw_phexdef(&quot;Kernel load address&quot;,
		                   ntohl(hdr-&gt;kernel_la),
		                   layout ? layout-&gt;kernel_la : 0xffffffff);
		inspect_fw_phexdef(&quot;Kernel entry point&quot;,
		                   ntohl(hdr-&gt;kernel_ep),
		                   layout ? layout-&gt;kernel_ep : 0xffffffff);
		inspect_fw_phexdecdef(&quot;Rootfs data offset&quot;,
		                      ntohl(hdr-&gt;rootfs_ofs),
		                      layout ? layout-&gt;rootfs_ofs : 0xffffffff);
	} else {
		inspect_fw_phex(&quot;Kernel load address&quot;,
		                ntohl(hdr-&gt;kernel_la));
		inspect_fw_phex(&quot;Kernel entry point&quot;,
		                ntohl(hdr-&gt;kernel_ep));
		inspect_fw_phexdec(&quot;Rootfs data offset&quot;,
		                   ntohl(hdr-&gt;rootfs_ofs));
	}
	inspect_fw_phexdec(&quot;Rootfs data length&quot;,
	                   ntohl(hdr-&gt;rootfs_len));
	inspect_fw_phexdec(&quot;Boot loader data offset&quot;,
	                   ntohl(hdr-&gt;boot_ofs));
	inspect_fw_phexdec(&quot;Boot loader data length&quot;,
	                   ntohl(hdr-&gt;boot_len));
	inspect_fw_phexdec(&quot;Total firmware length&quot;,
	                   ntohl(hdr-&gt;fw_length));
    
	if (extract) {
		FILE *fp;
		char *filename;
        
		printf(&quot;\n&quot;);
        
		filename = malloc(strlen(inspect_info.file_name) + 8);
		sprintf(filename, &quot;%s-kernel&quot;, inspect_info.file_name);
		printf(&quot;Extracting kernel to \&quot;%s\&quot;...\n&quot;, filename);
		fp = fopen(filename, &quot;w&quot;);
		if (fp)	{
			if (!fwrite(buf + ntohl(hdr-&gt;kernel_ofs),
			            ntohl(hdr-&gt;kernel_len), 1, fp)) {
				ERR(&quot;error in fwrite(): %s&quot;, strerror(errno));
			}
			fclose(fp);
		} else {
			ERR(&quot;error in fopen(): %s&quot;, strerror(errno));
		}
		free(filename);
        
		filename = malloc(strlen(inspect_info.file_name) + 8);
		sprintf(filename, &quot;%s-rootfs&quot;, inspect_info.file_name);
		printf(&quot;Extracting rootfs to \&quot;%s\&quot;...\n&quot;, filename);
		fp = fopen(filename, &quot;w&quot;);
		if (fp)	{
			if (!fwrite(buf + ntohl(hdr-&gt;rootfs_ofs),
			            ntohl(hdr-&gt;rootfs_len), 1, fp)) {
				ERR(&quot;error in fwrite(): %s&quot;, strerror(errno));
			}
			fclose(fp);
		} else {
			ERR(&quot;error in fopen(): %s&quot;, strerror(errno));
		}
		free(filename);
	}
    
out_free_buf:
	free(buf);
    out:
	return ret;
}

int main(int argc, char *argv[])
{
	int ret = EXIT_FAILURE;
	int err;
    
	FILE *outfile;
    
	progname = basename(argv[0]);
    
	while ( 1 ) {
		int c;
        
		c = getopt(argc, argv, &quot;a:B:H:E:F:L:V:N:W:ci:k:r:R:o:xhsj&quot;);
		if (c == -1)
			break;
        
		switch (c) {
            case &#039;a&#039;:
                sscanf(optarg, &quot;0x%x&quot;, &amp;rootfs_align);
                break;
            case &#039;B&#039;:
                board_id = optarg;
                break;
            case &#039;H&#039;:
                opt_hw_id = optarg;
                break;
            case &#039;E&#039;:
                sscanf(optarg, &quot;0x%x&quot;, &amp;kernel_ep);
                break;
            case &#039;F&#039;:
                layout_id = optarg;
                break;
            case &#039;W&#039;:
                opt_hw_rev = optarg;
                break;
            case &#039;L&#039;:
                sscanf(optarg, &quot;0x%x&quot;, &amp;kernel_la);
                break;
            case &#039;V&#039;:
                version = optarg;
                break;
            case &#039;N&#039;:
                vendor = optarg;
                break;
            case &#039;c&#039;:
                combined++;
                break;
            case &#039;k&#039;:
                kernel_info.file_name = optarg;
                break;
            case &#039;r&#039;:
                rootfs_info.file_name = optarg;
                break;
            case &#039;R&#039;:
                sscanf(optarg, &quot;0x%x&quot;, &amp;rootfs_ofs);
                break;
            case &#039;o&#039;:
                ofname = optarg;
                break;
            case &#039;s&#039;:
                strip_padding = 1;
                break;
            case &#039;i&#039;:
                inspect_info.file_name = optarg;
                break;
            case &#039;j&#039;:
                add_jffs2_eof = 1;
                break;
            case &#039;x&#039;:
                extract = 1;
                break;
            case &#039;h&#039;:
                usage(EXIT_SUCCESS);
                break;
            default:
                usage(EXIT_FAILURE);
                break;
		}
	}
    
	ret = check_options();
	if (ret)
		goto out;
    
	if (!inspect_info.file_name)
		ret = build_fw();
	else
		ret = inspect_fw();
    
    out:
	return ret;
}</pre>

</p>

</div>

<h2 class="sectionedit4" id="some_outputs_from_the_above_program_for_6_firmwares">Some outputs from the above program for 6 firmwares</h2>
<div class="level2">

<p>
Original FW 111103 (cat the mtd1 and mtd2 into /tmp, then tftp it over and merge them with ie: copy /b in DOS)
<pre class="code">File name              :  
File size              : 0x003c0000 /  3932160 bytes
Version 1 Header size  : 0x00000200 /      512 bytes
Header MD5Sum1         : c0 72 33 5f b8 63 23 93 1e 7c 25 8a 8f 49 a7 82 (ok)
Header MD5Sum2         : 7d 1a 19 f4 57 b2 98 ed 75 03 02 19 64 87 48 b9 (purpose yet unknown, unchecked here)

Vendor name            : TP-LINK Technologies
Firmware version       : ver. 1.0
Hardware ID            : 0x00110101 (unknown)
Hardware Revision      : 0x00000001

Kernel data offset     : 0x00000200 /      512 bytes
Kernel data length     : 0x000da2db /   893659 bytes
Kernel load address    : 0x80002000
Kernel entry point     : 0x801d6980
Rootfs data offset     : 0x00100000 /  1048576 bytes
Rootfs data length     : 0x002c0000 /  2883584 bytes
Boot loader data offset: 0x00000000 /        0 bytes
Boot loader data length: 0x00000000 /        0 bytes
Total firmware length  : 0x003c0000 /  3932160 bytes

MD5 (kernel) = f47785e1d34a94cb457310052be68fa9
MD5 (rootfs) = 724b260768caa752ad20ed467d4c78ef

893659 Feb 25 04:08 kernel
2883584 Feb 25 04:08 rootfs

LZMA (magic number 5D 00 00 80) at kernel file
from http://www.mjmwired.net/kernel/Documentation/x86/boot.txt
http://www.devttys0.com/2011/06/mystery-file-system/

Using 7zip for windows, it shows LZMA:25

Kernels between the 111103 and 111129 are the same binary wise, only the complied date &quot;texts&quot; (two places) are different
</pre>

</p>

<p>
FW from Tplink site 111129
<a href="http://www.tp-link.cn/pages/download-detail.asp?d=696" class="urlextern" title="http://www.tp-link.cn/pages/download-detail.asp?d=696"  rel="nofollow">http://www.tp-link.cn/pages/download-detail.asp?d=696</a>
</p>

<p>
<pre class="code">File name              : 111129/mr11uv1.bin
File size              : 0x003c0000 /  3932160 bytes
Version 1 Header size  : 0x00000200 /      512 bytes
Unknown value 1        : 0x6813fc20 / 1746140192 bytes
Header MD5Sum1         : eb 99 bb c1 73 fd 15 04 9b 52 bd 69 ee 5f b7 1b (ok)
Header MD5Sum2         : c9 82 b9 5f 5c c2 30 df f3 5b bd 24 0b cb 52 46 (purpose yet unknown, unchecked here)

Vendor name            : TP-LINK Technologies
Firmware version       : ver. 1.0
Hardware ID            : 0x00110101 (unknown)
Hardware Revision      : 0x00000001

Kernel data offset     : 0x00000200 /      512 bytes
Kernel data length     : 0x000da300 /   893696 bytes
Kernel load address    : 0x80002000
Kernel entry point     : 0x801d6980
Rootfs data offset     : 0x00100000 /  1048576 bytes
Rootfs data length     : 0x002c0000 /  2883584 bytes
Boot loader data offset: 0x00000000 /        0 bytes
Boot loader data length: 0x00000000 /        0 bytes
Total firmware length  : 0x003c0000 /  3932160 bytes

893696 Feb 25 04:09 mr11uv1.bin-kernel
2883584 Feb 25 04:09 mr11uv1.bin-rootfs

MD5 (mr11uv1.bin-kernel) = 5cf9b55ed98e31fd934c1100093206be
MD5 (mr11uv1.bin-rootfs) = a79be973a0dd3ec09861de94d4bb8ef9

LZMA (magic number 5D 00 00 80) at kernel file

Using 7zip for windows, it shows LZMA:25
</pre>

</p>

<p>
The difference between the 11103 and 11129 are (TODO)
</p>

<p>
9 files changed in /etc
4 files changed in /lib
5 files changed in /usr
29 files changed in /web
</p>

<p>
From <a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/" class="urlextern" title="http://downloads.openwrt.org/snapshots/trunk/ar71xx/"  rel="nofollow">http://downloads.openwrt.org/snapshots/trunk/ar71xx/</a>
</p>

<p>
All are Feb 19, 2012 snapshots
</p>

<p>
openwrt-ar71xx-generic-tl-mr11u-v1-jffs2-factory.bin
<pre class="code">File name              : openwrt-ar71xx-generic-tl-mr11u-v1-jffs2-factory.bin
File size              : 0x003c0000 /  3932160 bytes
Version 1 Header size  : 0x00000200 /      512 bytes
Header MD5Sum1         : 84 66 3f 25 5a b6 13 54 1e 1a e4 83 98 2e 0b 23 (ok)
Header MD5Sum2         : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 (purpose yet unknown, unchecked here)

Vendor name            : OpenWrt
Firmware version       : r30639
Hardware ID            : 0x00110101 (unknown)
Hardware Revision      : 0x00000001

Kernel data offset     : 0x00000200 /      512 bytes
Kernel data length     : 0x000efe00 /   982528 bytes
Kernel load address    : 0x80060000
Kernel entry point     : 0x80060000
Rootfs data offset     : 0x00100000 /  1048576 bytes
Rootfs data length     : 0x00220004 /  2228228 bytes
Boot loader data offset: 0x00000000 /        0 bytes
Boot loader data length: 0x00000000 /        0 bytes
Total firmware length  : 0x003c0000 /  3932160 bytes

(magic number 6D 00) at kernel file 

Using 7zip for windows, it shows LZMA:23

Runs Linux 3.2.5</pre>

</p>

<p>
openwrt-ar71xx-generic-tl-mr11u-v1-jffs2-sysupgrade.bin
<pre class="code">File name              : openwrt-ar71xx-generic-tl-mr11u-v1-jffs2-sysupgrade.bin
File size              : 0x00320004 /  3276804 bytes
Version 1 Header size  : 0x00000200 /      512 bytes
Header MD5Sum1         : 21 bb 88 24 cd 12 2f b6 92 1b 22 0d db 54 50 e8 (ok)
Header MD5Sum2         : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 (purpose yet unknown, unchecked here)

Vendor name            : OpenWrt
Firmware version       : r30639
Hardware ID            : 0x00110101 (unknown)
Hardware Revision      : 0x00000001

Kernel data offset     : 0x00000200 /      512 bytes
Kernel data length     : 0x000efe00 /   982528 bytes
Kernel load address    : 0x80060000
Kernel entry point     : 0x80060000
Rootfs data offset     : 0x00100000 /  1048576 bytes
Rootfs data length     : 0x00220004 /  2228228 bytes
Boot loader data offset: 0x00000000 /        0 bytes
Boot loader data length: 0x00000000 /        0 bytes
Total firmware length  : 0x003c0000 /  3932160 bytes
</pre>

</p>

<p>
openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-factory.bin
</p>

<p>
<pre class="code">File name              : openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-factory.bin
File size              : 0x003c0000 /  3932160 bytes
Version 1 Header size  : 0x00000200 /      512 bytes
Header MD5Sum1         : 23 eb 64 02 83 76 f2 58 07 59 9d 92 72 7b 35 ab (ok)
Header MD5Sum2         : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 (purpose yet unknown, unchecked here)

Vendor name            : OpenWrt
Firmware version       : r30639
Hardware ID            : 0x00110101 (unknown)
Hardware Revision      : 0x00000001

Kernel data offset     : 0x00000200 /      512 bytes
Kernel data length     : 0x000e3d5c /   933212 bytes
Kernel load address    : 0x80060000
Kernel entry point     : 0x80060000
Rootfs data offset     : 0x00100000 /  1048576 bytes
Rootfs data length     : 0x0016b6c2 /  1488578 bytes
Boot loader data offset: 0x00000000 /        0 bytes
Boot loader data length: 0x00000000 /        0 bytes
Total firmware length  : 0x003c0000 /  3932160 bytes


MD5 (openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-factory.bin-kernel) = e670abedba1561d0b9508748839bdb08
MD5 (openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-factory.bin-rootfs) = fc8b1d348d7ee655c7c373e8920e6eea

(same md5 for kernel as below)

933212 Feb 25 03:57 openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-factory.bin-kernel
1488578 Feb 25 03:57 openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-factory.bin-rootfs

Wrong rootfs offset in the header... should be 0xE3F5C
</pre>

</p>

<p>
openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-sysupgrade.bin
<pre class="code">File name              : openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-sysupgrade.bin
File size              : 0x00250004 /  2424836 bytes
Version 1 Header size  : 0x00000200 /      512 bytes
Header MD5Sum1         : 47 bf 73 ae dd d0 a5 08 c8 cb a9 21 be e0 21 5a (ok)
Header MD5Sum2         : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 (purpose yet unknown, unchecked here)

Vendor name            : OpenWrt
Firmware version       : r30639
Hardware ID            : 0x00110101 (unknown)
Hardware Revision      : 0x00000001

Kernel data offset     : 0x00000200 /      512 bytes
Kernel data length     : 0x000e3d5c /   933212 bytes
Kernel load address    : 0x80060000
Kernel entry point     : 0x80060000
Rootfs data offset     : 0x00100000 /  1048576 bytes
Rootfs data length     : 0x0016b6c2 /  1488578 bytes
Boot loader data offset: 0x00000000 /        0 bytes
Boot loader data length: 0x00000000 /        0 bytes
Total firmware length  : 0x003c0000 /  3932160 bytes

Gives error when extracting (why?)
 *** error: error in fwrite(): Bad address

MD5 (openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-sysupgrade.bin-kernel) = e670abedba1561d0b9508748839bdb08
MD5 (openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-sysupgrade.bin-rootfs) = 3e5ac7044a1ce39a52a77cf17718a17d

933212 Feb 25 03:59 openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-sysupgrade.bin-kernel
1380352 Feb 25 03:59 openwrt-ar71xx-generic-tl-mr11u-v1-squashfs-sysupgrade.bin-rootfs

(smaller sized rootfs? corrupted?) 

Wrong rootfs offset in the header... should be 0xE3F5C</pre>

TODO
</p>

</div>

<h2 class="sectionedit5" id="to_extract_the_rootfs_of_factory_image">To Extract the rootfs of factory image</h2>
<div class="level2">

<p>
from <a href="https://forum.openwrt.org/viewtopic.php?pid=151276" class="urlextern" title="https://forum.openwrt.org/viewtopic.php?pid=151276"  rel="nofollow">https://forum.openwrt.org/viewtopic.php?pid=151276</a>
</p>

<p>
Use Xcode checkout to get this
</p>

<p>
<a href="http://code.google.com/p/firmware-mod-kit/source/browse/trunk/trunk/src/others/squashfs-4.0-lzma/" class="urlextern" title="http://code.google.com/p/firmware-mod-kit/source/browse/trunk/trunk/src/others/squashfs-4.0-lzma/"  rel="nofollow">http://code.google.com/p/firmware-mod-kit/source/browse/trunk/trunk/src/others/squashfs-4.0-lzma/</a>
</p>

<p>
then copy the squashfs-4.0-lzma directory from &quot;/others/&quot; out to usb stick, then bootup ie: Parallels Desktop 7 for Mac with the BackBox 2.01 linux ISO image in text mode, then mount the usb stick inside, then do &quot;make&quot; to create the unsquashfs-lzma executable
</p>

<p>
to extract the files, you would need ext2 or the root of the ramdisk is fine too, just make a dir ie: /extracted
</p>

<p>
use unsquashfs-lzma rootfs to extract it 
</p>

<p>
use mksquashfs-lzma pathtoread/ outputFile to recreate image
</p>

<p>
then just paste the result into the offset 100000(<abbr title="If I remember correctly">IIRC</abbr>) (you will see the squashfs header), then fix md5, then flash via firmware upgrade
</p>

</div>

<h2 class="sectionedit6" id="making_it_work_with_other_unsupported_modems_with_factory_image">Making it work with other &quot;unsupported&quot; modems with factory image</h2>
<div class="level2">

</div>

<h3 class="sectionedit7" id="patching_httpd_to_remove_error_commands">patching httpd to remove ERROR commands</h3>
<div class="level3">

<p>
ie: AT+CFUN=1
</p>

<p>
TODO
</p>

<p>
the pppd command run is 
<pre class="code">/dev/ttyUSB0 115200 connect chat -V -E -f /etc/ppp/conn-script disconnect chat -
V -E -f /etc/ppp/disconn-script defaultroute noaccomp nopcomp lcp-echo-failure 5
 lcp-echo-interval 30 httpd-pid x user_len x passwd_len x special-flag 100 m
ru 1480 mtu 1480 usepeerdns noipdefault refuse-chap refuse-mschap refuse-mschap-
v2 refuse-eap ipcp-accept-local ipcp-accept-remote unit 0</pre>

</p>

</div>

<h3 class="sectionedit8" id="result">Result</h3>
<div class="level3">

<p>
Telus/Koodo is fine (can use pap),   
</p>

<p>
Bell Mobility will need some fixing (keeps failing authentication)
</p>

<p>
remove the &quot;user_len xx passwd_len xx&quot; section,  (don&#039;t know why but it fixed it)
then add your own user &quot;x&quot; password &quot;x&quot;
</p>

<p>
Also you have to fix the httpd-pid to match the real pid in the argument, else the pppd will terminate because httpd does not &quot;detect&quot; pppd is online, even though it is.
</p>

<p>
Average time from cold boot to &quot;online&quot; : 1 min 15 seconds
</p>

<p>
TODO
</p>

</div>

                    <!-- wikipage stop -->
                                    </div>

                <div class="docInfo"><bdi>inbox/macosx.lion.txt</bdi> · Last modified: 2013/07/14 09:19 (external edit)</div>

                            </div></div><!-- /content -->

            <hr class="a11y" />

            <!-- PAGE ACTIONS -->
            <div id="dokuwiki__pagetools">
                <h3 class="a11y">Page Tools</h3>
                <div class="tools">
                    <ul>
                        <li><a href="macosx.lion?do=edit"  class="action source" accesskey="v" rel="nofollow" title="Show pagesource [V]"><span>Show pagesource</span></a></li><li><a href="macosx.lion?do=revisions"  class="action revs" accesskey="o" rel="nofollow" title="Old revisions [O]"><span>Old revisions</span></a></li><li><a href="macosx.lion?do=backlink"  class="action backlink" rel="nofollow" title="Backlinks"><span>Backlinks</span></a></li><li><a href="macosx.lion#dokuwiki__top"  class="action top" accesskey="t" rel="nofollow" title="Back to top [T]"><span>Back to top</span></a></li>                    </ul>
                </div>
            </div>
        </div><!-- /wrapper -->

        
<!-- ********** FOOTER ********** -->
<div id="dokuwiki__footer"><div class="pad">
    <div class="license">Except where otherwise noted, content on this wiki is licensed under the following license: <bdi><a href="http://creativecommons.org/licenses/by-nc-sa/3.0/" rel="license" class="urlextern">CC Attribution-Noncommercial-Share Alike 3.0 Unported</a></bdi></div>
    <div class="buttons">
        <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/" rel="license"><img src="../lib/images/license/button/cc-by-nc-sa.png" alt="CC Attribution-Noncommercial-Share Alike 3.0 Unported" /></a>        <a href="http://www.dokuwiki.org/donate" title="Donate" ><img
            src="../lib/tpl/openwrt/images/button-donate.gif" width="80" height="15" alt="Donate" /></a>
        <a href="http://www.php.net" title="Powered by PHP" ><img
            src="../lib/tpl/openwrt/images/button-php.gif" width="80" height="15" alt="Powered by PHP" /></a>
        <a href="http://validator.w3.org/check/referer" title="Valid HTML5" ><img
            src="../lib/tpl/openwrt/images/button-html5.png" width="80" height="15" alt="Valid HTML5" /></a>
        <a href="http://jigsaw.w3.org/css-validator/check/referer?profile=css3" title="Valid CSS" ><img
            src="../lib/tpl/openwrt/images/button-css.png" width="80" height="15" alt="Valid CSS" /></a>
        <a href="http://dokuwiki.org/" title="Driven by DokuWiki" ><img
            src="../lib/tpl/openwrt/images/button-dw.png" width="80" height="15" alt="Driven by DokuWiki" /></a>
    </div>
</div></div><!-- /footer -->

    </div></div><!-- /site -->

    <div class="no"><img src="../lib/exe/indexer.php?id=inbox%253Amacosx.lion&amp;1432265553" width="2" height="1" alt="" /></div>
    <div id="screen__mode" class="no"></div>    <!--[if ( lte IE 7 | IE 8 ) ]></div><![endif]-->
</body>
</html>
